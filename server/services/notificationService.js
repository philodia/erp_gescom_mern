// On utilise une approche de "late initialization"
// L'instance de socket.io sera inject√©e apr√®s sa cr√©ation dans server.js
let io = null;

class NotificationService {
  /**
   * Initialise le service avec l'instance de Socket.IO.
   * Doit √™tre appel√© une seule fois au d√©marrage du serveur.
   * @param {object} socketIoInstance - L'instance de Socket.IO cr√©√©e dans server.js.
   */
  init(socketIoInstance) {
    if (!io) {
      io = socketIoInstance;
      console.log('‚úÖ Service de notification initialis√©.');
    }
  }

  /**
   * Envoie une notification √† tous les utilisateurs connect√©s.
   * @param {string} eventName - Le nom de l'√©v√©nement √† √©mettre (ex: 'nouvelle_commande').
   * @param {object} data - Les donn√©es de la notification.
   */
  sendToAll(eventName, data) {
    if (!io) {
      console.error('Le service de notification n\'a pas √©t√© initialis√©.');
      return;
    }
    io.emit(eventName, data);
    console.log(`üì¢ Notification envoy√©e √† tous: ${eventName}`);
  }

  /**
   * Envoie une notification √† un utilisateur sp√©cifique.
   * @param {string} userId - L'ID de l'utilisateur destinataire.
   * @param {string} eventName - Le nom de l'√©v√©nement √† √©mettre.
   * @param {object} data - Les donn√©es de la notification.
   */
  sendToUser(userId, eventName, data) {
    if (!io) {
      console.error('Le service de notification n\'a pas √©t√© initialis√©.');
      return;
    }
    // 'to' envoie le message uniquement aux sockets qui ont rejoint cette "room"
    io.to(userId).emit(eventName, data);
    console.log(`üéØ Notification envoy√©e √† l'utilisateur ${userId}: ${eventName}`);
  }

  /**
   * Envoie une notification √† tous les utilisateurs ayant un r√¥le sp√©cifique.
   * C'est une m√©thode de haut niveau qui n√©cessite que l'on puisse mapper les r√¥les aux userIds.
   * Pour l'instant, on va simuler l'envoi √† tous les admins par exemple.
   * Pour une vraie impl√©mentation, il faudrait une gestion des sockets/r√¥les plus fine.
   *
   * @param {string} role - Le r√¥le destinataire (ex: 'Admin', 'Comptable').
   * @param {string} eventName - Le nom de l'√©v√©nement.
   * @param {object} data - Les donn√©es.
   */
  sendToRole(role, eventName, data) {
    if (!io) {
      console.error('Le service de notification n\'a pas √©t√© initialis√©.');
      return;
    }
    // Pour une impl√©mentation simple, on peut √©mettre vers une "room" de r√¥le.
    // Les clients devraient rejoindre la room de leur r√¥le √† la connexion.
    io.to(`role_${role}`).emit(eventName, data);
    console.log(`üé≠ Notification envoy√©e au r√¥le ${role}: ${eventName}`);
  }
}

module.exports = new NotificationService();
